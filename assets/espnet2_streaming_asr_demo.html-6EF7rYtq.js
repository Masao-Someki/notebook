import{_ as s,o as n,c as a,e as l}from"./app-FOR18dDf.js";const e={},p=l(`<h1 id="espnet2-real-streaming-transformer-demonstration" tabindex="-1"><a class="header-anchor" href="#espnet2-real-streaming-transformer-demonstration"><span>ESPnet2 real streaming Transformer demonstration</span></a></h1><p>Details in &quot;Streaming Transformer ASR with Blockwise Synchronous Beam Search&quot; (https://arxiv.org/abs/2006.14941)</p><p>This local notebook provides a demonstration of streaming ASR based on Transformer using ESPnet2.</p><p>You can recognize a recorded audio file or a speech online.</p><p>Author: Keqi Deng (UCAS)</p><h2 id="train-a-streaming-transformer-model" tabindex="-1"><a class="header-anchor" href="#train-a-streaming-transformer-model"><span>Train a streaming Transformer model</span></a></h2><p>You can train a streaming Transformer model on your own corpus following the example of https://github.com/espnet/espnet/blob/master/egs2/aishell/asr1/run_streaming.sh</p><h2 id="download-pre-trained-model-and-audio-file-for-demo" tabindex="-1"><a class="header-anchor" href="#download-pre-trained-model-and-audio-file-for-demo"><span>Download pre-trained model and audio file for demo</span></a></h2><p>You can download the pre-trained model from the ESPnet_model_zoo or directly from Huggingface.</p><h3 id="for-mandarin-task-pretrained-using-aishell-1" tabindex="-1"><a class="header-anchor" href="#for-mandarin-task-pretrained-using-aishell-1"><span>For Mandarin Task (Pretrained using AISHELL-1)</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">tag=</span><span style="color:#CE9178;">&#39;Emiru Tsunoo/aishell_asr_train_asr_streaming_transformer_raw_zh_char_sp_valid.acc.ave&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="for-english-task-pretrained-using-tedlium2" tabindex="-1"><a class="header-anchor" href="#for-english-task-pretrained-using-tedlium2"><span>For English Task (Pretrained using Tedlium2)</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">tag=</span><span style="color:#CE9178;">&#39;D-Keqi/espnet_asr_train_asr_streaming_transformer_raw_en_bpe500_sp_valid.acc.ave&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="import-packages" tabindex="-1"><a class="header-anchor" href="#import-packages"><span>Import packages</span></a></h2><p>Make sure that you have installed the latest ESPnet</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> sys</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> espnet</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.bin.asr_inference_streaming </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Speech2TextStreaming</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet_model_zoo.downloader </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> ModelDownloader</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> argparse</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> wave</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prepare-for-inference" tabindex="-1"><a class="header-anchor" href="#prepare-for-inference"><span>Prepare for inference</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">d=ModelDownloader()</span></span>
<span class="line"><span style="color:#D4D4D4;">speech2text = Speech2TextStreaming(</span></span>
<span class="line"><span style="color:#D4D4D4;">    **d.download_and_unpack(tag),</span></span>
<span class="line"><span style="color:#9CDCFE;">    token_type</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    bpemodel</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    maxlenratio</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    minlenratio</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    beam_size</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    ctc_weight</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    lm_weight</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    penalty</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    nbest</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    device</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;cpu&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    disable_repetition_detection</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    decoder_text_length_limit</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    encoded_feat_length_limit</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">prev_lines = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> progress_output</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#569CD6;">    global</span><span style="color:#D4D4D4;"> prev_lines</span></span>
<span class="line"><span style="color:#D4D4D4;">    lines=[</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> text:</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(lines[-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) &gt; </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            lines.append(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        lines[-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] += i</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> i,line </span><span style="color:#C586C0;">in</span><span style="color:#DCDCAA;"> enumerate</span><span style="color:#D4D4D4;">(lines):</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> i == prev_lines:</span></span>
<span class="line"><span style="color:#D4D4D4;">            sys.stderr.write(</span><span style="color:#CE9178;">&#39;</span><span style="color:#D7BA7D;">\\n\\r</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            sys.stderr.write(</span><span style="color:#CE9178;">&#39;</span><span style="color:#D7BA7D;">\\r\\033</span><span style="color:#CE9178;">[B</span><span style="color:#D7BA7D;">\\033</span><span style="color:#CE9178;">[K&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        sys.stderr.write(line)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    prev_lines = </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(lines)</span></span>
<span class="line"><span style="color:#D4D4D4;">    sys.stderr.flush()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> recognize</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">wavfile</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">    with</span><span style="color:#D4D4D4;"> wave.open(wavfile, </span><span style="color:#CE9178;">&#39;rb&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> wavfile:</span></span>
<span class="line"><span style="color:#D4D4D4;">        ch=wavfile.getnchannels()</span></span>
<span class="line"><span style="color:#D4D4D4;">        bits=wavfile.getsampwidth()</span></span>
<span class="line"><span style="color:#D4D4D4;">        rate=wavfile.getframerate()</span></span>
<span class="line"><span style="color:#D4D4D4;">        nframes=wavfile.getnframes()</span></span>
<span class="line"><span style="color:#D4D4D4;">        buf = wavfile.readframes(-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        data=np.frombuffer(buf, </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;int16&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    speech = data.astype(np.float16)/</span><span style="color:#B5CEA8;">32767.0</span><span style="color:#6A9955;"> #32767 is the upper limit of 16-bit binary numbers and is used for the normalization of int to float.</span></span>
<span class="line"><span style="color:#D4D4D4;">    sim_chunk_length = </span><span style="color:#B5CEA8;">640</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> sim_chunk_length &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#DCDCAA;"> range</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(speech)//sim_chunk_length):</span></span>
<span class="line"><span style="color:#D4D4D4;">            results = speech2text(</span><span style="color:#9CDCFE;">speech</span><span style="color:#D4D4D4;">=speech[i*sim_chunk_length:(i+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)*sim_chunk_length], </span><span style="color:#9CDCFE;">is_final</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> results </span><span style="color:#569CD6;">is</span><span style="color:#569CD6;"> not</span><span style="color:#569CD6;"> None</span><span style="color:#569CD6;"> and</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(results) &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                nbests = [text </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> text, token, token_int, hyp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> results]</span></span>
<span class="line"><span style="color:#D4D4D4;">                text = nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> nbests </span><span style="color:#569CD6;">is</span><span style="color:#569CD6;"> not</span><span style="color:#569CD6;"> None</span><span style="color:#569CD6;"> and</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(nbests) &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#C586C0;"> else</span><span style="color:#CE9178;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">                progress_output(nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#C586C0;">            else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                progress_output(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span></span>
<span class="line"><span style="color:#D4D4D4;">        results = speech2text(speech[(i+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)*sim_chunk_length:</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(speech)], </span><span style="color:#9CDCFE;">is_final</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        results = speech2text(speech, </span><span style="color:#9CDCFE;">is_final</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    nbests = [text </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> text, token, token_int, hyp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> results]</span></span>
<span class="line"><span style="color:#D4D4D4;">    progress_output(nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recognize-the-audio-file" tabindex="-1"><a class="header-anchor" href="#recognize-the-audio-file"><span>Recognize the audio file</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">#You can upload your own audio file for recognition, and also we provide some demo audio files that you can download from Google drive. </span></span>
<span class="line"><span style="color:#6A9955;">#For Mandarin task, the demo file comes from the AISSHELL-1: https://drive.google.com/file/d/1l8w93r8Bs5FtC3A-1ydEqFQdP4k6FiUL/view?usp=sharing</span></span>
<span class="line"><span style="color:#6A9955;">#wavfile=&#39;./BAC009S0724W0121.wav&#39;</span></span>
<span class="line"><span style="color:#6A9955;">#For  English task, the demo file comes from the Librispeech: https://drive.google.com/file/d/1l71ZUNQ6qQk95T54H0tH_OEwZvWnEL4u/view?usp=sharing</span></span>
<span class="line"><span style="color:#6A9955;">#wavfile=&#39;./61-70968-0000.wav&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">recognize(wavfile)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recognize-the-speech-from-speaker" tabindex="-1"><a class="header-anchor" href="#recognize-the-speech-from-speaker"><span>Recognize the speech from speaker</span></a></h2><h3 id="install-pyaudio" tabindex="-1"><a class="header-anchor" href="#install-pyaudio"><span>Install pyaudio</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> pyaudio</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="streamingly-recognize-with-pyaudio" tabindex="-1"><a class="header-anchor" href="#streamingly-recognize-with-pyaudio"><span>Streamingly recognize with pyaudio</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">CHUNK=</span><span style="color:#B5CEA8;">2048</span></span>
<span class="line"><span style="color:#D4D4D4;">FORMAT=pyaudio.paInt16</span></span>
<span class="line"><span style="color:#D4D4D4;">CHANNELS=</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">RATE=</span><span style="color:#B5CEA8;">16000</span></span>
<span class="line"><span style="color:#D4D4D4;">RECORD_SECONDS=</span><span style="color:#B5CEA8;">5</span></span>
<span class="line"><span style="color:#D4D4D4;">p=pyaudio.PyAudio()</span></span>
<span class="line"><span style="color:#D4D4D4;">stream = p.open(</span><span style="color:#9CDCFE;">format</span><span style="color:#D4D4D4;">=FORMAT,</span><span style="color:#9CDCFE;">channels</span><span style="color:#D4D4D4;">=CHANNELS,</span><span style="color:#9CDCFE;">rate</span><span style="color:#D4D4D4;">=RATE,</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">frames_per_buffer</span><span style="color:#D4D4D4;">=CHUNK)</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#DCDCAA;"> range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(RATE/CHUNK*RECORD_SECONDS)+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    data=stream.read(CHUNK)</span></span>
<span class="line"><span style="color:#D4D4D4;">    data=np.frombuffer(data, </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;int16&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    data=data.astype(np.float16)/</span><span style="color:#B5CEA8;">32767.0</span><span style="color:#6A9955;"> #32767 is the upper limit of 16-bit binary numbers and is used for the normalization of int to float.</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> i==</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(RATE/CHUNK*RECORD_SECONDS):</span></span>
<span class="line"><span style="color:#D4D4D4;">        results = speech2text(</span><span style="color:#9CDCFE;">speech</span><span style="color:#D4D4D4;">=data, </span><span style="color:#9CDCFE;">is_final</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        break</span></span>
<span class="line"><span style="color:#D4D4D4;">    results = speech2text(</span><span style="color:#9CDCFE;">speech</span><span style="color:#D4D4D4;">=data, </span><span style="color:#9CDCFE;">is_final</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> results </span><span style="color:#569CD6;">is</span><span style="color:#569CD6;"> not</span><span style="color:#569CD6;"> None</span><span style="color:#569CD6;"> and</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(results) &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        nbests = [text </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> text, token, token_int, hyp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> results]</span></span>
<span class="line"><span style="color:#D4D4D4;">        text = nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> nbests </span><span style="color:#569CD6;">is</span><span style="color:#569CD6;"> not</span><span style="color:#569CD6;"> None</span><span style="color:#569CD6;"> and</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(nbests) &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#C586C0;"> else</span><span style="color:#CE9178;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">        progress_output(nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#C586C0;">    else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        progress_output(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">nbests = [text </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> text, token, token_int, hyp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> results]</span></span>
<span class="line"><span style="color:#D4D4D4;">progress_output(nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function r(i,t){return n(),a("div",null,o)}const D=s(e,[["render",r],["__file","espnet2_streaming_asr_demo.html.vue"]]);export{D as default};
