import{_ as i,r as l,o as r,c as o,a,b as s,d as e,e as t}from"./app-FOR18dDf.js";const p={},d=a("h1",{id:"text-to-speech-recipe",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#text-to-speech-recipe"},[a("span",null,"Text-to-Speech (Recipe)")])],-1),c=a("p",null,[s("This is the example notebook of how-to-run the ESPnet TTS recipe using an4 dataset."),a("br"),s(" You can understand the overview of TTS recipe through this notebook within an hour!")],-1),u=a("p",null,"See also:",-1),v={href:"https://espnet.github.io/espnet",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/espnet",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/kan-bayashi",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>Last update: 2019/07/25</p><h2 id="setup-envrionment" tabindex="-1"><a class="header-anchor" href="#setup-envrionment"><span>Setup envrionment</span></a></h2><p>First, let&#39;s setup the environmet to run the recipe.<br> It take around 10 minues. Please keep waiting for a while.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># OS setup</span></span>
<span class="line"><span>!sudo apt-get install bc tree</span></span>
<span class="line"><span>!cat /etc/os-release</span></span>
<span class="line"><span></span></span>
<span class="line"><span># espnet setup</span></span>
<span class="line"><span>!git clone https://github.com/espnet/espnet</span></span>
<span class="line"><span>!cd espnet; pip install -e .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># warp ctc setup</span></span>
<span class="line"><span>!git clone https://github.com/espnet/warp-ctc -b pytorch-1.1</span></span>
<span class="line"><span>!cd warp-ctc &amp;&amp; mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make -j</span></span>
<span class="line"><span>!cd warp-ctc/pytorch_binding &amp;&amp; python setup.py install </span></span>
<span class="line"><span></span></span>
<span class="line"><span># kaldi setup</span></span>
<span class="line"><span>!cd /content/espnet/tools; git clone https://github.com/kaldi-asr/kaldi</span></span>
<span class="line"><span>!echo &quot;&quot; &gt; ./espnet/tools/kaldi/tools/extras/check_dependencies.sh # ignore check</span></span>
<span class="line"><span>!chmod +x ./espnet/tools/kaldi/tools/extras/check_dependencies.sh</span></span>
<span class="line"><span>!cd ./espnet/tools/kaldi/tools; make sph2pipe sclite</span></span>
<span class="line"><span>!rm -rf espnet/tools/kaldi/tools/python</span></span>
<span class="line"><span>!wget https://18-198329952-gh.circle-artifacts.com/0/home/circleci/repo/ubuntu16-featbin.tar.gz</span></span>
<span class="line"><span>!tar -xf ./ubuntu16-featbin.tar.gz # take a few minutes</span></span>
<span class="line"><span>!cp featbin/* espnet/tools/kaldi/src/featbin/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># make dummy activate</span></span>
<span class="line"><span>!mkdir -p espnet/tools/venv/bin</span></span>
<span class="line"><span>!touch espnet/tools/venv/bin/activate</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="run-the-recipe" tabindex="-1"><a class="header-anchor" href="#run-the-recipe"><span>Run the recipe</span></a></h2><p>Now ready to run the recipe!<br> We use the most simplest recipe <code>egs/an4/tts1</code> as an example.</p><blockquote><p>Unfortunately, <code>egs/an4/tts1</code> is too small to generate reasonable speech.<br> But you can understand the flow or TTS recipe through this recipe since all of the TTS recipes has the exactly same flow.</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># Let&#39;s go to an4 recipe!</span></span>
<span class="line"><span>import os</span></span>
<span class="line"><span>os.chdir(&quot;/content/espnet/egs/an4/tts1&quot;)</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before running the recipe, let us check the recipe structure.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!tree -L 1</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Each recipe has the same structure and files.</p><ul><li><strong>run.sh</strong>: Main script of the recipe. Once you run this script, all of the processing will be conducted from data download, preparation, feature extraction, training, and decoding.</li><li><strong>cmd.sh</strong>: Command configuration source file about how-to-run each processing. You can modify this script if you want to run the script through job control system e.g. Slurm or Torque.</li><li><strong>path.sh</strong>: Path configuration source file. Basically, we do not have to touch.</li><li><strong>conf/</strong>: Directory containing configuration files.</li><li><strong>local/</strong>: Directory containing the recipe-specific scripts e.g. data preparation.</li><li><strong>steps/</strong> and <strong>utils/</strong>: Directory containing kaldi tools.</li></ul><p>Main script <strong>run.sh</strong> consists of several stages:</p><ul><li><strong>stage -1</strong>: Download data if the data is available online.</li><li><strong>stage 0</strong>: Prepare data to make kaldi-stype data directory.</li><li><strong>stage 1</strong>: Extract feature vector, calculate statistics, and perform normalization.</li><li><strong>stage 2</strong>: Prepare a dictionary and make json files for training.</li><li><strong>stage 3</strong>: Train the E2E-TTS network.</li><li><strong>stage 4</strong>: Decode mel-spectrogram using the trained network.</li><li><strong>stage 5</strong>: Generate a waveform from a generated mel-spectrogram using Griffin-Lim.</li></ul><p>Currently, we support the following networks:</p>`,15),b={href:"https://arxiv.org/abs/1712.05884",target:"_blank",rel:"noopener noreferrer"},x={href:"https://arxiv.org/pdf/1809.08895.pdf",target:"_blank",rel:"noopener noreferrer"},_={href:"https://arxiv.org/pdf/1905.09263.pdf",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>Let us check each stage step-by-step via <strong>--stage</strong> and <strong>--stop_stage</strong> options!</p><h3 id="stage-1-data-download" tabindex="-1"><a class="header-anchor" href="#stage-1-data-download"><span>Stage -1: Data download</span></a></h3><p>This stage downloads dataset if the dataset is available online.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage -1 --stop_stage -1</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!tree -L 1</span></span>
<span class="line"><span>!ls downloads/</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see <strong>downloads</strong> directory is cretead, which containing donwloaded an4 dataset.</p><h3 id="stage-0-data-preparation" tabindex="-1"><a class="header-anchor" href="#stage-0-data-preparation"><span>Stage 0: Data preparation</span></a></h3><p>This stage creates kaldi-style data directories.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 0 --stop_stage 0</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!tree -L 1 data</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Through the data preparation stage, kaldi-style data directories will be created.<br> Here, <strong>data/train/</strong> is corresponding to training set, and <strong>data/test</strong> is corresponding to evaluation set.<br> Each directory has the same following files:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls data/*</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The above four files are all we have to prepare to create new recipes.<br> Let&#39;s check each file.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!head -n 3 data/train/{wav.scp,text,utt2spk,spk2utt}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Each file contains the following information:</p><ul><li><strong>wav.scp</strong>: List of audio path. Each line has <code>&lt;utt_id&gt; &lt;wavfile_path or command pipe&gt;</code>. <code>&lt;utt_id&gt;</code> must be unique.</li><li><strong>text</strong>: List of transcriptions. Each line has <code>&lt;utt_id&gt; &lt;transcription&gt;</code>. In the case of TTS, we assume that <code>&lt;transcription&gt;</code> is cleaned.</li><li><strong>utt2spk</strong>: List of correspondence table between utterances and speakers. Each line has <code>&lt;utt_id&gt; &lt;speaker_id&gt;</code>.</li><li><strong>spk2utt</strong>: List of correspondence table between speakers and utterances. Each lien has <code>&lt;speaker_id&gt; &lt;utt_id&gt; ... &lt;utt_id&gt; </code>. This file can be automatically created from <strong>utt2spk</strong>.</li></ul><p>In the ESPnet, speaker information is not used for any processing.<br> Therefore, <strong>utt2spk</strong> and <strong>spk2utt</strong> can be a dummy.</p><h3 id="stage-1-feature-extration" tabindex="-1"><a class="header-anchor" href="#stage-1-feature-extration"><span>Stage 1: Feature extration</span></a></h3><p>This stage performs the following processing:</p><ol><li>Mel-spectrogram extraction</li><li>Data split into training and validation set</li><li>Statistics (mean and variance) calculation</li><li>Normalization</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 1 --stop_stage 1 --nj 4</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Raw filterbanks are saved in <strong>fbank/</strong> directory with ark/scp format.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls fbank</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>.ark</strong> is binary file and <strong>.scp</strong> contain the correspondence between <code>&lt;utt_id&gt;</code> and <code>&lt;path_in_ark&gt;</code>.<br> Since feature extraction can be performed for split small sets in parallel, raw_fbank is split into <code>raw_fbank_*.{1..N}.{scp,ark}.</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!head -n 3 fbank/raw_fbank_train.1.scp</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>These files can be loaded in python via <strong>kaldiio</strong> as follows:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>import kaldiio</span></span>
<span class="line"><span>import matplotlib.pyplot as plt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># load scp file</span></span>
<span class="line"><span>scp_dict = kaldiio.load_scp(&quot;fbank/raw_fbank_train.1.scp&quot;)</span></span>
<span class="line"><span>for key in scp_dict:</span></span>
<span class="line"><span>    plt.imshow(scp_dict[key].T[::-1])</span></span>
<span class="line"><span>    plt.title(key)</span></span>
<span class="line"><span>    plt.colorbar()</span></span>
<span class="line"><span>    plt.show()</span></span>
<span class="line"><span>    break</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span># load ark file</span></span>
<span class="line"><span>ark_generator = kaldiio.load_ark(&quot;fbank/raw_fbank_train.1.ark&quot;)</span></span>
<span class="line"><span>for key, array in ark_generator:</span></span>
<span class="line"><span>    plt.imshow(array.T[::-1])</span></span>
<span class="line"><span>    plt.title(key)</span></span>
<span class="line"><span>    plt.colorbar()</span></span>
<span class="line"><span>    plt.show()</span></span>
<span class="line"><span>    break</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After raw mel-spectrogram extraction, some files are added in <strong>data/train/</strong>.<br><strong>feats.scp</strong> is concatenated scp file of <strong>fbank/raw_fbank_train.{1..N}.scp</strong>.<br><strong>utt2num_frames</strong> has the number of feature frames of each <code>&lt;utt_id&gt;</code>.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls data/train</span></span>
<span class="line"><span>!head -n 3 data/train/{feats.scp,utt2num_frames}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>And <strong>data/train/</strong> directory is split into two directory:</p><ul><li><strong>data/train_nodev/</strong>: data directory for training</li><li><strong>data/train_dev/</strong>: data directory for validation</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls data</span></span>
<span class="line"><span>!ls data/train_*</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can find <strong>cmvn.ark</strong> in <strong>data/train_nodev</strong>, which is the calculated statistics file.<br> This file also can be loaded in python via kaldiio.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># load cmvn.ark file (Be careful not load_ark, but load_mat)</span></span>
<span class="line"><span>cmvn = kaldiio.load_mat(&quot;data/train_nodev/cmvn.ark&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># cmvn consists of mean and variance, the last dimension of mean represents the number of frames.</span></span>
<span class="line"><span>print(&quot;cmvn shape = &quot;+ str(cmvn.shape))</span></span>
<span class="line"><span></span></span>
<span class="line"><span># calculate mean and variance</span></span>
<span class="line"><span>mu = cmvn[0, :-1] / cmvn[0, -1]</span></span>
<span class="line"><span>var = cmvn[1, :-1] / cmvn[0, -1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># show mean</span></span>
<span class="line"><span>print(&quot;mean = &quot; + str(mu))</span></span>
<span class="line"><span>print(&quot;variance = &quot; + str(var))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Normalzed features for training, validation and evaluation set are dumped in <strong>dump/{train_nodev,train_dev,test}/</strong>.<br> There ark and scp can be loaded as the same as the above procedure.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls dump/*</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="stage-2-dictionary-and-json-preparation" tabindex="-1"><a class="header-anchor" href="#stage-2-dictionary-and-json-preparation"><span>Stage 2: Dictionary and json preparation</span></a></h3><p>This stage creates dictrionary from <strong>data/train_nodev/text</strong> and makes json file for training.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 2 --stop_stage 2</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Dictrionary file will be created in <strong>data/lang_1char/</strong>.<br> Dictionary file consists of <code>&lt;token&gt;</code> <code>&lt;token index&gt;</code>.<br> Here, <code>&lt;token index&gt;</code> starts from 1 because 0 is used as padding index.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls data</span></span>
<span class="line"><span>!cat data/lang_1char/train_nodev_units.txt</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Json file will be created for training / validation /evaludation sets and they are saved as <strong>dump/{train_nodev,train_dev,test}/data.json</strong>.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls dump/*/*.json</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Each json file contains all of the information in the data directory.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!head -n 27 dump/train_nodev/data.json</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>&quot;shape&quot;: Shape of the input or output sequence. Here input shape [63, 80] represents the number of frames = 63 and the dimension of mel-spectrogram = 80.</li><li>&quot;text&quot;: Original transcription.</li><li>&quot;token&quot;: Token sequence of original transcription.</li><li>&quot;tokenid&quot; Token id sequence of original transcription, which is converted using the dictionary.</li></ul><p>Now ready to start training!</p><h3 id="stage-3-network-training" tabindex="-1"><a class="header-anchor" href="#stage-3-network-training"><span>Stage 3: Network training</span></a></h3><p>This stage performs training of the network.<br> Network training configurations are written as <strong>.yaml</strong> format file.<br> Let us check the default cofiguration <strong>conf/train_pytroch_tacotron2.yaml</strong>.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!cat conf/train_pytorch_tacotron2.yaml</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can modify this configuration file to change the hyperparameters.<br> Here, let&#39;s change the number of epochs for this demonstration.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># TODO(kan-bayashi): Change here to use change_yaml.py</span></span>
<span class="line"><span>!cat conf/train_pytorch_tacotron2.yaml | sed -e &quot;s/epochs: 50/epochs: 3/g&quot; &gt; conf/train_pytorch_tacotron2_sample.yaml</span></span>
<span class="line"><span>!cat conf/train_pytorch_tacotron2_sample.yaml</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s train the network.<br> You can specify the config file via <strong>--train_config</strong> option. It takes several minutes.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 3 --stop_stage 3 --train_config conf/train_pytorch_tacotron2_sample.yaml --verbose 1</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can see the training log in <code>exp/train_*/train.log</code>.</p><p>The models are saved in <code>exp/train_*/results/</code> directory.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/{results,results/att_ws}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>exp/train_*/results/*.png</code> are the figures of training curve.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>from IPython.display import Image, display_png</span></span>
<span class="line"><span>print(&quot;all loss curve&quot;)</span></span>
<span class="line"><span>display_png(Image(&quot;exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/all_loss.png&quot;))</span></span>
<span class="line"><span>print(&quot;l1 loss curve&quot;)</span></span>
<span class="line"><span>display_png(Image(&quot;exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/l1_loss.png&quot;))</span></span>
<span class="line"><span>print(&quot;mse loss curve&quot;)</span></span>
<span class="line"><span>display_png(Image(&quot;exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/mse_loss.png&quot;))</span></span>
<span class="line"><span>print(&quot;bce loss curve&quot;)</span></span>
<span class="line"><span>display_png(Image(&quot;exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/bce_loss.png&quot;))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>exp/train_*/results/att_ws/.png</code> are the figures of attention weights in each epoch.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>print(&quot;Attention weights of initial epoch&quot;)</span></span>
<span class="line"><span>display_png(Image(&quot;exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/att_ws/fash-cen1-b.ep.1.png&quot;))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>exp/train_*/results/model.loss.best</code> contains only the model parameters.<br> On the other hand, <code>exp/train_*/results/snapshot</code> contains the model parameters, optimizer states, and iterator states.<br> So you can restart from the training by specifying the snapshot file with <strong>--resume</strong> option.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># resume training from snapshot.ep.2</span></span>
<span class="line"><span>!./run.sh --stage 3 --stop_stage 3 --train_config conf/train_pytorch_tacotron2_sample.yaml --resume exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/results/snapshot.ep.2 --verbose 1</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!cat exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/train.log</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Also, we support tensorboard.<br> You can see the training log through tensorboard.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>%load_ext tensorboard</span></span>
<span class="line"><span>%tensorboard --logdir tensorboard/train_nodev_pytorch_train_pytorch_tacotron2_sample/</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stage-4-network-decoding" tabindex="-1"><a class="header-anchor" href="#stage-4-network-decoding"><span>Stage 4: Network decoding</span></a></h3><p>This stage performs decoding using the trained model to generate mel-spectrogram from a given text.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 4 --stop_stage 4 --nj 8 --train_config conf/train_pytorch_tacotron2_sample.yaml </span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Generated features are saved as ark/scp format.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/outputs_model.loss.best_decode/*</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can specify the model or snapshot to be used for decoding via <strong>--model</strong>.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 4 --stop_stage 4 --nj 8 --train_config conf/train_pytorch_tacotron2_sample.yaml --model snapshot.ep.2</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/outputs_snapshot.ep.2_decode/*</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="stage-5-waveform-synthesis" tabindex="-1"><a class="header-anchor" href="#stage-5-waveform-synthesis"><span>Stage 5: Waveform synthesis</span></a></h3><p>Finally, in this stage, we generate waveform using Grrifin-Lim algorithm.<br> First, we perform de-normalization to convert the generated mel-spectrogram into the original scale.<br> Then we apply Grrifin-Lim algorithm to restore phase components and apply inverse STFT to generate waveforms.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!./run.sh --stage 5 --stop_stage 5 --nj 8 --train_config conf/train_pytorch_tacotron2_sample.yaml --griffin_lim_iters 50</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Generated wav files are saved in <code>exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/outputs_model.loss.best_decode_denorm/*/wav</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!ls exp/train_nodev_pytorch_train_pytorch_tacotron2_sample/outputs_model.loss.best_decode_denorm/*/wav</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!tree -L 3</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="next-step" tabindex="-1"><a class="header-anchor" href="#next-step"><span>NEXT step</span></a></h2><ul><li>Try pretrained model to generate speech.</li><li>Try a large single speaker dataset recipe <strong>egs/ljspeech/tts1</strong>.</li><li>Try a large multi-speaker recipe <strong>egs/libritts/tts1</strong>.</li><li>Make the original recipe using your own dataset.</li></ul>`,82);function f(y,E){const n=l("ExternalLinkIcon");return r(),o("div",null,[d,c,u,a("ul",null,[a("li",null,[s("Documentaion: "),a("a",v,[s("https://espnet.github.io/espnet"),e(n)])]),a("li",null,[s("Github: "),a("a",m,[s("https://github.com/espnet"),e(n)])])]),a("p",null,[s("Author: "),a("a",g,[s("Tomoki Hayashi"),e(n)])]),h,a("ul",null,[a("li",null,[s("Tacotron2: "),a("a",b,[s("Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions"),e(n)])]),a("li",null,[s("Transformer: "),a("a",x,[s("Neural Speech Synthesis with Transformer Network"),e(n)])]),a("li",null,[s("FastSpeech: "),a("a",_,[s("FastSpeech: Fast, Robust and Controllable Text to Speech"),e(n)])])]),k])}const w=i(p,[["render",f],["__file","tts_cli.html.vue"]]);export{w as default};
