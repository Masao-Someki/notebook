import{_ as e,r as l,o as p,c as o,a as s,b as n,d as t,e as i}from"./app-FOR18dDf.js";const r={},c=s("h1",{id:"tts-demo-for-espnet-easy",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tts-demo-for-espnet-easy"},[s("span",null,"TTS demo for ESPnet-Easy!")])],-1),d=s("p",null,"In this notebook, we will demonstrate how to train an Text to Speech (TTS) model using the LJSpeech dataset. Basic flow of data preparation and training is the same with ASR.",-1),D={href:"https://keithito.com/LJ-Speech-Dataset/",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"/hdd/dataset/",-1),y=s("code",null,"/hdd/dataset/",-1),v=i(`<h2 id="data-preparation" tabindex="-1"><a class="header-anchor" href="#data-preparation"><span>Data preparation</span></a></h2><p>First, let&#39;s create dump files!<br> The format of the dump files is the same as the ASR dump files.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;data_name&quot;</span><span style="color:#D4D4D4;">: [</span><span style="color:#CE9178;">&quot;dump_file_name&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;dump_format&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> espnetez </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> ez</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> local.data_prep </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> get_dataset</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">DUMP_DIR = </span><span style="color:#CE9178;">&quot;./dump/ljspeech&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">LJS_DIRS = </span><span style="color:#CE9178;">&quot;/hdd/database/LJSpeech-1.1&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">data_info = {</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;speech&quot;</span><span style="color:#D4D4D4;">: [</span><span style="color:#CE9178;">&quot;wav.scp&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;sound&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text&quot;</span><span style="color:#D4D4D4;">: [</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset, test_dataset = get_dataset(LJS_DIRS)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">train_dir = os.path.join(DUMP_DIR, </span><span style="color:#CE9178;">&quot;train&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">test_dir = os.path.join(DUMP_DIR, </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">ez.data.create_dump_file(train_dir, train_dataset, data_info)</span></span>
<span class="line"><span style="color:#D4D4D4;">ez.data.create_dump_file(test_dir, test_dataset, data_info)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generate-token-list" tabindex="-1"><a class="header-anchor" href="#generate-token-list"><span>Generate token list</span></a></h2><p>To generate a token list, we need to run <code>espnet2.bin.tokenize_text</code> script. ESPnet-Easy has a wrapper function for this script.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># generate training texts from the training data</span></span>
<span class="line"><span style="color:#6A9955;"># you can select several datasets to train sentencepiece.</span></span>
<span class="line"><span style="color:#D4D4D4;">ez.preprocess.prepare_sentences([</span><span style="color:#CE9178;">&quot;dump/ljspeech/train/text&quot;</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&quot;data/&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">ez.preprocess.tokenize(</span></span>
<span class="line"><span style="color:#9CDCFE;">    input</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;data/train.txt&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    output</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;data/tokenized.txt&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    token_type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;phn&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    cleaner</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;tacotron&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    g2p</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;g2p_en&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="training" tabindex="-1"><a class="header-anchor" href="#training"><span>Training</span></a></h2><p>To prepare the stats file before training, you can execute the <code>collect_stats</code> method. This step is required before the training process and ensuring accurate statistics for the model.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">EXP_DIR = </span><span style="color:#CE9178;">&quot;exp/train_tts&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">STATS_DIR = </span><span style="color:#CE9178;">&quot;exp/stats&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># load config</span></span>
<span class="line"><span style="color:#D4D4D4;">training_config = ez.config.from_yaml(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;tts&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;tacotron2.yaml&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;data/tokenized.txt&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">    training_config[</span><span style="color:#CE9178;">&quot;token_list&quot;</span><span style="color:#D4D4D4;">] = [t.replace(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> t </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> f.readlines()]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Define the Trainer class</span></span>
<span class="line"><span style="color:#D4D4D4;">trainer = ez.Trainer(</span></span>
<span class="line"><span style="color:#9CDCFE;">    task</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;tts&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    train_config</span><span style="color:#D4D4D4;">=training_config,</span></span>
<span class="line"><span style="color:#9CDCFE;">    train_dump_dir</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;dump/ljspeech/train&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    valid_dump_dir</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;dump/ljspeech/test&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    data_info</span><span style="color:#D4D4D4;">=data_info,</span></span>
<span class="line"><span style="color:#9CDCFE;">    output_dir</span><span style="color:#D4D4D4;">=EXP_DIR,</span></span>
<span class="line"><span style="color:#9CDCFE;">    stats_dir</span><span style="color:#D4D4D4;">=STATS_DIR,</span></span>
<span class="line"><span style="color:#9CDCFE;">    ngpu</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">trainer.collect_stats()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, we are ready to begin the training process!</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">trainer.train()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="inference" tabindex="-1"><a class="header-anchor" href="#inference"><span>Inference</span></a></h2><p>You can just use the inference API of the ESPnet.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> soundfile </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> sf</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.bin.tts_inference </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Text2Speech</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">m = Text2Speech(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;./exp/finetune/config.yaml&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">	&quot;./exp/finetune/valid.loss.ave.pth&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">text = </span><span style="color:#CE9178;">&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">output = m(text)[</span><span style="color:#CE9178;">&#39;wav&#39;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">sf.write(</span><span style="color:#CE9178;">&quot;output.wav&quot;</span><span style="color:#D4D4D4;">, output, </span><span style="color:#B5CEA8;">16000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function m(h,b){const a=l("ExternalLinkIcon");return p(),o("div",null,[c,d,s("p",null,[n("Before proceeding, please ensure that you have already downloaded the LJSpeech dataset from "),s("a",D,[n("here"),t(a)]),n(" and have placed the data in a directory of your choice. In this notebook, we assume that you have stored the dataset in the "),u,n(" directory. If your dataset is located in a different directory, please make sure to replace "),y,n(" with the actual path to your dataset.")]),v])}const E=e(r,[["render",m],["__file","tacotron2.html.vue"]]);export{E as default};
