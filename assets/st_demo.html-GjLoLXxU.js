import{_ as l,r as i,o,c as d,a as s,d as a,b as e,e as t}from"./app-FOR18dDf.js";const p={},r=s("h1",{id:"espnet-speech-translation-demonstration",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#espnet-speech-translation-demonstration"},[s("span",null,"ESPnet Speech Translation Demonstration")])],-1),c={href:"https://colab.research.google.com/github/espnet/notebook/blob/master/st_demo.ipynb",target:"_blank",rel:"noopener noreferrer"},u=s("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"},null,-1),v=s("p",null,"See also",-1),m=s("ul",null,[s("li",null,"ESPnet: https://github.com/espnet/espnet"),s("li",null,"ESPnet documentation: https://espnet.github.io/espnet/"),s("li",null,"TTS demo: https://colab.research.google.com/github/espnet/notebook/blob/master/tts_realtime_demo.ipynb")],-1),h={href:"https://github.com/ShigekiKarita",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>Install</span></a></h2><p>It takes around 3 minutes. Please keep waiting for a while.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># OS setup</span></span>
<span class="line"><span>!cat /etc/os-release</span></span>
<span class="line"><span>!apt-get install -qq bc tree sox</span></span>
<span class="line"><span></span></span>
<span class="line"><span># espnet and moses setup</span></span>
<span class="line"><span>!git clone -q https://github.com/ShigekiKarita/espnet.git</span></span>
<span class="line"><span>!pip install -q torch==1.1</span></span>
<span class="line"><span>!cd espnet; git checkout c0466d9a356c1a33f671a546426d7bc33b5b17e8; pip install -q -e .</span></span>
<span class="line"><span>!cd espnet/tools/; make moses.done</span></span>
<span class="line"><span></span></span>
<span class="line"><span># download pre-compiled warp-ctc and kaldi tools</span></span>
<span class="line"><span>!espnet/utils/download_from_google_drive.sh \\</span></span>
<span class="line"><span>    &quot;https://drive.google.com/open?id=13Y4tSygc8WtqzvAVGK_vRV9GlV7TRC0w&quot; espnet/tools tar.gz &gt; /dev/null</span></span>
<span class="line"><span></span></span>
<span class="line"><span># make dummy activate</span></span>
<span class="line"><span>!mkdir -p espnet/tools/venv/bin &amp;&amp; touch espnet/tools/venv/bin/activate</span></span>
<span class="line"><span>!echo &quot;setup done.&quot;</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="spanish-speech-english-text-translation" tabindex="-1"><a class="header-anchor" href="#spanish-speech-english-text-translation"><span>Spanish speech -&gt; English text translation</span></a></h2><p>This audio says &quot;yo soy Jos√©.&quot;</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>from IPython.display import display, Audio</span></span>
<span class="line"><span>display(Audio(&quot;/content/espnet/test_utils/st_test.wav&quot;, rate=16000))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s translate this into English text by our pretrained Transformer ST model trained on the Fisher-CALLHOME Spanish dataset.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span># move on the recipe directory</span></span>
<span class="line"><span>import os</span></span>
<span class="line"><span>os.chdir(&quot;/content/espnet/egs/fisher_callhome_spanish/st1&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>!../../../utils/translate_wav.sh --models fisher_callhome_spanish.transformer.v1.es-en ../../../test_utils/st_test.wav | tee /content/translated.txt</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As seen above, we successfully obtained the result: <strong>&quot;Translated text: yes i&#39;m jose&quot;</strong>!</p><h2 id="english-translated-text-to-speech-synthesis" tabindex="-1"><a class="header-anchor" href="#english-translated-text-to-speech-synthesis"><span>English translated text-to-speech synthesis</span></a></h2><p>Now let&#39;s generate an <strong>English speech</strong> from the translated text using a pretrained ESPnet-TTS model.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!sed -n &#39;s/Translated text://p&#39;  /content/translated.txt | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39; | tee /content/translated_sed.txt</span></span>
<span class="line"><span>!../../../utils/synth_wav.sh /content/translated_sed.txt</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>import matplotlib.pyplot as plt</span></span>
<span class="line"><span>import kaldiio</span></span>
<span class="line"><span>fbank = next(iter(kaldiio.load_scp(&quot;decode/translated_sed/outputs/feats.scp&quot;).values()))</span></span>
<span class="line"><span>plt.matshow(fbank.T)</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>from IPython.display import display, Audio</span></span>
<span class="line"><span>display(Audio(&quot;decode/translated_sed/wav_wnv/translated_sed_gen.wav&quot;))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Successfully, it says &quot;Yes I&#39;m Jose&quot;! For more TTS demo, visit https://colab.research.google.com/github/espnet/notebook/blob/master/tts_realtime_demo.ipynb</p><h2 id="check-decoding-log" tabindex="-1"><a class="header-anchor" href="#check-decoding-log"><span>Check decoding log</span></a></h2><p>After the translation, you will find <code>&lt;decode_dir&gt;/&lt;wav name&gt;/result.json</code> for details;</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!cat decode/st_test/result.json</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>and <code>&lt;decode_dir&gt;/&lt;wav name&gt;/log/decode.log</code> for runtime log;</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!cat decode/st_test/log/decode.log</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s calculate real-time factor (RTF) of the ST decoding from the <code>decode.log</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>from dateutil import parser</span></span>
<span class="line"><span>from subprocess import PIPE, run</span></span>
<span class="line"><span></span></span>
<span class="line"><span># calc input duration (seconds)</span></span>
<span class="line"><span>input_sec = float(run([&quot;soxi&quot;, &quot;-D&quot;, &quot;/content/espnet/test_utils/st_test.wav&quot;], stdout=PIPE).stdout)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># calc NN decoding time</span></span>
<span class="line"><span>with open(&quot;decode/st_test/log/decode.log&quot;, &quot;r&quot;) as f:</span></span>
<span class="line"><span>  times = [parser.parse(x.split(&quot;(&quot;)[0]) for x in f if &quot;e2e_st_transformer&quot; in x]</span></span>
<span class="line"><span>decode_sec = (times[-1] - times[0]).total_seconds()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># get real-time factor (RTF)</span></span>
<span class="line"><span>print(&quot;Input duration:\\t&quot;, input_sec, &quot;sec&quot;)</span></span>
<span class="line"><span>print(&quot;NN decoding:\\t&quot;, decode_sec, &quot;sec&quot;)</span></span>
<span class="line"><span>print(&quot;Real-time factor:\\t&quot;, decode_sec / input_sec)</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see above, ESPnet-ST can <strong>translate speech faster than the input</strong> (it should be RTF &lt; 1.0).</p><h2 id="training-st-models-from-scratch" tabindex="-1"><a class="header-anchor" href="#training-st-models-from-scratch"><span>Training ST models from scratch</span></a></h2>`,25),g={href:"https://kaldi-asr.org/doc/kaldi_for_dummies.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://colab.research.google.com/github/espnet/notebook/blob/master/asr_cli.ipynb",target:"_blank",rel:"noopener noreferrer"},_={href:"https://colab.research.google.com/github/espnet/notebook/blob/master/tts_cli.ipynb",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"run.sh",-1),f=t(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!cd /content/espnet/egs/must_c/st1/ &amp;&amp; ./run.sh --must-c /content</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>However, it takes too much time to finish downloading the dataset. So we cancel the cell above.</p><h2 id="details-of-espnet-tools" tabindex="-1"><a class="header-anchor" href="#details-of-espnet-tools"><span>Details of ESPnet tools</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!../../../utils/translate_wav.sh --help</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>!../../../utils/synth_wav.sh --help</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function E(q,y){const n=i("ExternalLinkIcon");return o(),d("div",null,[r,s("p",null,[s("a",c,[u,a(n)])]),v,m,s("p",null,[e("Author: "),s("a",h,[e("Shigeki Karita"),a(n)])]),b,s("p",null,[e("We provide "),s("a",g,[e("Kaldi-style recipes"),a(n)]),e(" for ST as well as "),s("a",x,[e("ASR"),a(n)]),e(" and "),s("a",_,[e("TTS"),a(n)]),e(" as all-in-one bash script "),k,e(":")]),f])}const w=l(p,[["render",E],["__file","st_demo.html.vue"]]);export{w as default};
