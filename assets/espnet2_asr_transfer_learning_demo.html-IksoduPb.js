import{_ as l,r as t,o as p,c as r,a as s,b as n,d as e,e as o}from"./app-FOR18dDf.js";const i={},c=s("h1",{id:"use-transfer-learning-for-asr-in-espnet2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#use-transfer-learning-for-asr-in-espnet2"},[s("span",null,[s("strong",null,"Use transfer learning for ASR in ESPnet2")])])],-1),d=s("p",null,"Author : Dan Berrebbi (dberrebb@andrew.cmu.edu)",-1),y=s("p",null,"Date : April 11th, 2022",-1),D=s("h1",{id:"abstract",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#abstract"},[s("span",null,"Abstract")])],-1),u=s("p",null,"In that tutorial, we will introduce several options to use pre-trained models/parameters for Automatic Speech Recognition (ASR) in ESPnet2. Available options are :",-1),m=s("li",null,"use a local model you (or a collegue) have already trained,",-1),h={href:"https://huggingface.co/espnet",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>We note that this is done for ASR training, so at <strong>stage 11</strong> of ESPnet2 models&#39; recipe.</p><h3 id="why-using-such-pre-trained-models" tabindex="-1"><a class="header-anchor" href="#why-using-such-pre-trained-models"><span>Why using such (pre-)trained models ?</span></a></h3><p>Several projects may involve making use of previously trained models, this is the reason why we developed ESPnet repository on HuggingFace for instance. Example of use cases are listed below (non-exhaustive):</p><ul><li>target a low resource language, a model trained from scratch may perform badly if trained with only few hours of data,</li><li>study robustness to shifts (domain, language ... shifts) of a model,</li><li>make use of massively trained multilingual models.</li><li>...</li></ul><h1 id="espnet-installation-about-10-minutes-in-total" tabindex="-1"><a class="header-anchor" href="#espnet-installation-about-10-minutes-in-total"><span>ESPnet installation (about 10 minutes in total)</span></a></h1><p>Please use the gpu environnement provided by google colab for runing this notebook.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git clone </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">depth </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> https://github.com/espnet/espnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># It takes 30 seconds</span></span>
<span class="line"><span style="color:#D4D4D4;">%cd /content/espnet/tools</span></span>
<span class="line"><span style="color:#D4D4D4;">!./setup_anaconda.sh anaconda espnet </span><span style="color:#B5CEA8;">3.9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># It may take ~8 minutes</span></span>
<span class="line"><span style="color:#D4D4D4;">%cd /content/espnet/tools</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">make CUDA_VERSION=</span><span style="color:#B5CEA8;">10.2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="mini-an4-recipe-as-a-transfer-learning-example" tabindex="-1"><a class="header-anchor" href="#mini-an4-recipe-as-a-transfer-learning-example"><span>mini_an4 recipe as a transfer learning example</span></a></h1><p>In this example, we use the <strong>mini_an4</strong> data, which has only 4 utterances for training. This is of course too small to train an ASR model, but it enables to run all the decribed transfer learning models on a colab environnement. After having run and understood those models/instructions, you can apply it to any other recipe of ESPnet2 or a new recipe that you build. First, move to the recipe directory</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">%cd /content/espnet/egs2/mini_an4/asr1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Add a configuration file</strong></p><p>As the mini_an4 does not contain any configuration file for ASR model, we add one here.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">config = {</span><span style="color:#CE9178;">&#39;accum_grad&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;batch_size&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;batch_type&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;folded&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;best_model_criterion&#39;</span><span style="color:#D4D4D4;">: [[</span><span style="color:#CE9178;">&#39;valid&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;acc&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;max&#39;</span><span style="color:#D4D4D4;">]],</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;decoder&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;transformer&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;decoder_conf&#39;</span><span style="color:#D4D4D4;">: {</span><span style="color:#CE9178;">&#39;dropout_rate&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;input_layer&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;embed&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;linear_units&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">2048</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;num_blocks&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">},</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;encoder&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;transformer&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;encoder_conf&#39;</span><span style="color:#D4D4D4;">: {</span><span style="color:#CE9178;">&#39;attention_dropout_rate&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;attention_heads&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;dropout_rate&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;input_layer&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;conv2d&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;linear_units&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">2048</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;num_blocks&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;output_size&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">256</span><span style="color:#D4D4D4;">},</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;grad_clip&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;init&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;xavier_uniform&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;keep_nbest_models&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;max_epoch&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;model_conf&#39;</span><span style="color:#D4D4D4;">: {</span><span style="color:#CE9178;">&#39;ctc_weight&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.3</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;length_normalized_loss&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;lsm_weight&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0.1</span><span style="color:#D4D4D4;">},</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;optim&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;adam&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;optim_conf&#39;</span><span style="color:#D4D4D4;">: {</span><span style="color:#CE9178;">&#39;lr&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1.0</span><span style="color:#D4D4D4;">},</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;patience&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;scheduler&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;noamlr&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;"> &#39;scheduler_conf&#39;</span><span style="color:#D4D4D4;">: {</span><span style="color:#CE9178;">&#39;warmup_steps&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> yaml</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;w&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">  yaml.dump(config, f)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Data preparation (stage 1 - stage 5)</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">1</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">5</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Stage 10: ASR collect stats</strong>:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># takes about 10 seconds</span></span>
<span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">10</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">10</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_config </span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Stage 11: ASR training (from scratch)</strong></p><p>We train our model for only 5 epochs, just to have a pre-trained model.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># takes about 1-2 minutes</span></span>
<span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_config </span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_tag </span><span style="color:#CE9178;">&quot;pre_trained_model&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Stage 11.2 : ASR training over a pre-trained model</strong></p><p>We train our new model over the previously trained model. (here as we use the same training data, this is not very useful, but again this is a toy example that is reproducible with any model.)</p><p><strong>Step 1</strong> : make sure your ASR model file has the proper ESPnet format (should be ok if trained with ESPnet). It just needs to be a &quot;.pth&quot; (or &quot;.pt&quot; or other extension) type pytorch model.</p><p><strong>Step 2</strong> : add the parameter <code>--pretrained_model path/to/your/pretrained/model/file.pth</code> to run.sh.</p><p><strong>Step 3</strong> : step 2 will initialize your new model with the parameters of the pre-trained model. Thus your new model will be trained with a strong initialization. However, if your new model have different parameter sizes for some parts of the model (e.g. last projection layer could be modified ...). This will lead to an error because of mismatches in size. To prevent this to happen, you can add the parameter <code>--ignore_init_mismatch true</code> in run.sh.</p>`,28),v=s("strong",null,"Step 4 (Optional)",-1),_=s("code",null,"--pretrained_model",-1),b=s("code",null,"--pretrained_model <file_path>:<src_key>:<dst_key>:<exclude_Keys>",-1),E=s("code",null,"src_key",-1),f=s("code",null,"dst_key",-1),C=s("code",null,"src_key",-1),k=s("code",null,"exclude_Keys",-1),q=s("code",null,"src_key",-1),w=s("code",null,"dst_key",-1),x=s("code",null,"exclude_Keys",-1),A=s("code",null,"--pretrained_model <file_path>:::decoder",-1),F={href:"https://github.com/espnet/espnet/blob/e76c78c0c661ab37cc081d46d9b059dcb31292fe/espnet2/torch_utils/load_pretrained_model.py#L43-L53",target:"_blank",rel:"noopener noreferrer"},B=o(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># takes about 1-2 minutes</span></span>
<span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#D4D4D4;"> \\</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_config </span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_tag </span><span style="color:#CE9178;">&quot;transfer_learning_with_pre_trained_model&quot;</span><span style="color:#D4D4D4;">\\</span></span>
<span class="line"><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">pretrained_model </span><span style="color:#CE9178;">&quot;/content/espnet/egs2/mini_an4/asr1/exp/asr_train_asr_raw_bpe30/valid.acc.ave.pth&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Stage 11.3 : ASR training over a HuggingFace pre-trained model</strong></p><p>We train our new model over the previously trained model from HuggingFace. Any model can be used, here we take a model trained on Bengali as an example. It can be found at https://huggingface.co/espnet/bn_openslr53.</p><h3 id="use-a-trained-model-from-espnet-repository-on-huggingface" tabindex="-1"><a class="header-anchor" href="#use-a-trained-model-from-espnet-repository-on-huggingface"><span>Use a trained model from ESPnet repository on HuggingFace.</span></a></h3>`,4),S={href:"https://huggingface.co/espnet",target:"_blank",rel:"noopener noreferrer"},P={href:"https://huggingface.co/espnet",target:"_blank",rel:"noopener noreferrer"},R=s("code",null,"wget https://huggingface.co/espnet/bn_openslr53/blob/main/exp/asr_train_asr_raw_bpe1000/41epoch.pth",-1),I=s("code",null,"git clone https://huggingface.co/espnet/bn_openslr53",-1),T=o(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>cd espnet</span></span>
<span class="line"><span>git checkout fa1b865352475b744c37f70440de1cc6b257ba70</span></span>
<span class="line"><span>pip install -e .</span></span>
<span class="line"><span>cd egs2/bn_openslr53/asr1</span></span>
<span class="line"><span>./run.sh --skip_data_prep false --skip_train true --download_model espnet/bn_openslr53</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, as you have the &quot;.pth&quot; model file, you can follow the steps 1 to 4 from the previous section in order to use this pre-train model.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">wget https://huggingface.co/espnet/bn_openslr53/resolve/main/exp/asr_train_asr_raw_bpe1000/</span><span style="color:#F44747;">41epoch</span><span style="color:#D4D4D4;">.pth</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The next command line will raise an error because of the size mismatch of some parameters, as mentionned before (step3).</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># will fail in about 5 seconds</span></span>
<span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#D4D4D4;"> \\</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_config </span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_tag </span><span style="color:#CE9178;">&quot;transfer_learning_with_pre_trained_model&quot;</span><span style="color:#D4D4D4;">\\</span></span>
<span class="line"><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">pretrained_model </span><span style="color:#CE9178;">&quot;/content/espnet/egs2/mini_an4/asr1/41epoch.pth&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To solve this issue, as mentionned, we can use the <code>--ignore_init_mismatch &quot;true&quot;</code> parameter.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># takes about 1-2 minutes</span></span>
<span class="line"><span style="color:#D4D4D4;">!./asr.sh </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop_stage </span><span style="color:#B5CEA8;">11</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_nodev&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">valid-</span><span style="color:#4EC9B0;">set</span><span style="color:#CE9178;"> &quot;train_dev&quot;</span><span style="color:#D4D4D4;"> \\</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">test_sets </span><span style="color:#CE9178;">&quot;test&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_config </span><span style="color:#CE9178;">&quot;conf/train_asr.yaml&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">asr_tag </span><span style="color:#CE9178;">&quot;transfer_learning_with_pre_trained_model_from_HF&quot;</span><span style="color:#D4D4D4;">\\</span></span>
<span class="line"><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">pretrained_model </span><span style="color:#CE9178;">&quot;/content/espnet/egs2/mini_an4/asr1/41epoch.pth&quot;</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">ignore_init_mismatch </span><span style="color:#CE9178;">&quot;true&quot;</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Additional note about the <code>--ignore_init_mismatch true</code> option :</strong> This option is very convenient because in lots of transfer learning use cases, you will aim to use a model trained on a language X (e.g. X=English) for another language Y. Language Y may have a vocabulary (set of tokens) different from language X, for instance if you target Y=Totonac, a Mexican low resource language, your model may be stronger if you use a different set of bpes/tokens thatn the one used to train the English model. In that situation, the last layer (projection to vocabulary space) of your ASR model needs to be initialized from scratch and may be different in shape than the one of the English model. For that reason, you should use the <code>--ignore_init_mismatch true</code> option. It also enables to handle the case where the scripts are differents from languages X to Y.</p>`,8);function z(H,j){const a=t("ExternalLinkIcon");return p(),r("div",null,[c,d,y,D,u,s("ul",null,[m,s("li",null,[n("use a trained model from "),s("a",h,[n("ESPnet repository on HuggingFace"),e(a)]),n(".")])]),g,s("p",null,[v,n(" : if you only want to use some specific parts of the pre-trained model, or exclude specific parts, you can specify it in the "),_,n(" argument by passing the component names with the following syntax : "),b,n(". "),E,n(" are the parameters you want to keep from the pre-trained model. "),f,n(" are the parameters you want to initialize in the new model with the "),C,n("parameters. And "),k,n(" are the parameters from the pre-trained model that you do not want to use. You can leave "),q,n(" and "),w,n(" fields empty and just fill "),x,n(" with the parameters that you ant to drop. For instance, if you want to re-use encoder parameters but not decoder ones, syntax will be "),A,n(". You can see the argument expected format in more details "),s("a",F,[n("here"),e(a)]),n(".")]),B,s("p",null,[s("a",S,[n("ESPnet repository on HuggingFace"),e(a)]),n(' contains more than 200 pre-trained models, for a wide variety of languages and dataset, and we are actively expanding this repositories with new models every week! This enable any user to perform transfer learning with a wide variety of models without having to re-train them. In order to use our pre-trained models, the first step is to download the ".pth" model file from the '),s("a",P,[n("HugginFace page"),e(a)]),n(". There are several easy way to do it, either by manually downloading them (e.g. "),R,n("), cloning it ("),I,n(") or downloading it through an ESPnet recipe (described in the models' pages on HuggingFace):")]),T])}const L=l(i,[["render",z],["__file","espnet2_asr_transfer_learning_demo.html.vue"]]);export{L as default};
