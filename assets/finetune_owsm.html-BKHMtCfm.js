import{_ as s,o as n,c as a,e as l}from"./app-FOR18dDf.js";const e={},p=l(`<h1 id="owsm-finetuning-with-custom-dataset" tabindex="-1"><a class="header-anchor" href="#owsm-finetuning-with-custom-dataset"><span>OWSM finetuning with custom dataset</span></a></h1><p>This Jupyter notebook provides a step-by-step guide on using the ESPnetEasy module to finetune owsm model. In this demonstration, we will leverage the custom dataset to finetune an OWSM model for ASR task.</p><h2 id="data-preparation" tabindex="-1"><a class="header-anchor" href="#data-preparation"><span>Data Preparation</span></a></h2><p>For this tutorial, we assume that we have the custom dataset with 654 audio with the following directory structure:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>audio</span></span>
<span class="line"><span>├── 001 [420 entries exceeds filelimit, not opening dir]</span></span>
<span class="line"><span>└── 002 [234 entries exceeds filelimit, not opening dir]</span></span>
<span class="line"><span>transcription</span></span>
<span class="line"><span>└── owsm_v3.1</span></span>
<span class="line"><span>      ├── 001.csv</span></span>
<span class="line"><span>      └── 002.csv</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The csv files contains the audio path, text, and text_ctc data in Japanese. For example, the csv constains the following data:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>audio/001/00014.wav,しゃべるたびに追いかけてくるんですけど,なんかしゃべるたびにおいかけてくるんですけど</span></span>
<span class="line"><span>audio/001/00015.wav,え、どうしよう,えどうしよう</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> glob </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> glob</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> librosa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> torch</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.bin.s2t_inference </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Speech2Text</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.layers.create_lora_adapter </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> create_lora_adapter</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> espnetez </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> ez</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Define hyper parameters</span></span>
<span class="line"><span style="color:#D4D4D4;">DUMP_DIR = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;./dump&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">CSV_DIR = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;./transcription&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">EXP_DIR = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;./exp/finetune&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">STATS_DIR = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;./exp/stats_finetune&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">FINETUNE_MODEL = </span><span style="color:#CE9178;">&quot;espnet/owsm_v3.1_ebf&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">LORA_TARGET = [</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;w_1&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;w_2&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;merge_proj&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">LANGUAGE = </span><span style="color:#CE9178;">&quot;jpn&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setup-training-configs-and-model" tabindex="-1"><a class="header-anchor" href="#setup-training-configs-and-model"><span>Setup training configs and model</span></a></h2><p>Since we are going to finetune an OWSM model for ASR task, we will use the tokenizer and TokenIDConverter of the OWSM model. We will also use the training config as the default parameter sets, and update them with the finetuning configuration.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">pretrained_model = Speech2Text.from_pretrained(</span></span>
<span class="line"><span style="color:#D4D4D4;">    FINETUNE_MODEL,</span></span>
<span class="line"><span style="color:#9CDCFE;">    category_sym</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;&lt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">LANGUAGE</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&gt;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    beam_size</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;"># Load model to extract configs.</span></span>
<span class="line"><span style="color:#D4D4D4;">pretrain_config = </span><span style="color:#DCDCAA;">vars</span><span style="color:#D4D4D4;">(pretrained_model.s2t_train_args)</span></span>
<span class="line"><span style="color:#D4D4D4;">tokenizer = pretrained_model.tokenizer</span></span>
<span class="line"><span style="color:#D4D4D4;">converter = pretrained_model.converter</span></span>
<span class="line"><span style="color:#C586C0;">del</span><span style="color:#D4D4D4;"> pretrained_model</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">finetune_config = ez.config.update_finetune_config(</span></span>
<span class="line"><span style="color:#CE9178;">	&#39;s2t&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	pretrain_config,</span></span>
<span class="line"><span style="color:#569CD6;">	f</span><span style="color:#CE9178;">&quot;./config/finetune_with_lora.yaml&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># define model loading function</span></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> count_parameters</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> sum</span><span style="color:#D4D4D4;">(p.numel() </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> p </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> model.parameters() </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> p.requires_grad)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> build_model_fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    pretrained_model = Speech2Text.from_pretrained(</span></span>
<span class="line"><span style="color:#D4D4D4;">        FINETUNE_MODEL,</span></span>
<span class="line"><span style="color:#9CDCFE;">        category_sym</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;&lt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">LANGUAGE</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&gt;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        beam_size</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    )</span></span>
<span class="line"><span style="color:#D4D4D4;">    model = pretrained_model.s2t_model</span></span>
<span class="line"><span style="color:#D4D4D4;">    model.train()</span></span>
<span class="line"><span style="color:#DCDCAA;">    print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;Trainable parameters: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">count_parameters(model)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">    # apply lora</span></span>
<span class="line"><span style="color:#D4D4D4;">    create_lora_adapter(model, </span><span style="color:#9CDCFE;">target_modules</span><span style="color:#D4D4D4;">=LORA_TARGET)</span></span>
<span class="line"><span style="color:#DCDCAA;">    print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;Trainable parameters after LORA: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">count_parameters(model)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> model</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrap-with-espneteasydataset" tabindex="-1"><a class="header-anchor" href="#wrap-with-espneteasydataset"><span>Wrap with ESPnetEasyDataset</span></a></h2><p>Before initiating the training process, it is crucial to adapt the dataset to the ESPnet format. The dataset class should output tokenized text and audio files in <code>np.array</code> format.</p><p>Then let&#39;s define the custom dataset class. The owsm finetuning requires <code>audio</code>, <code>text</code>, <code>text_prev</code> and <code>text_ctc</code> data. You can use your custom-defined dataset, huggingface <code>datasets</code> library, or <code>lhotse</code> library, or any other dataloader that you want to use.</p><p>When you try to use custom-defined dataset, you should define the <code>data_info</code> dictionary. It defines the mapping between the output of your model and the input of ESPnet models.</p><p><strong>Note</strong>:</p><ul><li>Currently we do not support the custom dataloader that feeds processed feature.</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">LANGUAGE = </span></span>
<span class="line"><span style="color:#6A9955;"># custom dataset class</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> CustomDataset</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">torch</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">utils</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Dataset</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data_list</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#6A9955;">        # data_list is a list of tuples (audio_path, text, text_ctc)</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#D4D4D4;">.data = data_list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __len__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#DCDCAA;"> len</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __getitem__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> self</span><span style="color:#D4D4D4;">._parse_single_data(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.data[idx])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> _parse_single_data</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        text = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;&lt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">LANGUAGE</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&gt;&lt;asr&gt;&lt;notimestamps&gt; </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">d[</span><span style="color:#CE9178;">&#39;transcript&#39;</span><span style="color:#D4D4D4;">]</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#CE9178;">            &quot;audio_path&quot;</span><span style="color:#D4D4D4;">: d[</span><span style="color:#CE9178;">&quot;audio_path&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#CE9178;">            &quot;text&quot;</span><span style="color:#D4D4D4;">: text,</span></span>
<span class="line"><span style="color:#CE9178;">            &quot;text_prev&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;&lt;na&gt;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">            &quot;text_ctc&quot;</span><span style="color:#D4D4D4;">: d[</span><span style="color:#CE9178;">&#39;text_ctc&#39;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">data_list = []</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> csv_file </span><span style="color:#C586C0;">in</span><span style="color:#DCDCAA;"> sorted</span><span style="color:#D4D4D4;">(glob(os.path.join(CSV_DIR, </span><span style="color:#CE9178;">&quot;*.csv&quot;</span><span style="color:#D4D4D4;">))):</span></span>
<span class="line"><span style="color:#C586C0;">    with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(csv_file, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">encoding</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;utf-8&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">        data_list += f.readlines()[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:] </span><span style="color:#6A9955;"># skip header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">validation_examples = </span><span style="color:#B5CEA8;">20</span></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset = CustomDataset(data_list[:-validation_examples])</span></span>
<span class="line"><span style="color:#D4D4D4;">valid_dataset = CustomDataset(data_list[-validation_examples:])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> tokenize</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> np.array(converter.tokens2ids(tokenizer.text2tokens(text)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># The output of CustomDatasetInstance[idx] will converted to np.array</span></span>
<span class="line"><span style="color:#6A9955;"># with the functions defined in the data_info dictionary.</span></span>
<span class="line"><span style="color:#D4D4D4;">data_info = {</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;speech&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: librosa.load(d[</span><span style="color:#CE9178;">&quot;audio_path&quot;</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">sr</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">16000</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(d[</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">]),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_prev&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(d[</span><span style="color:#CE9178;">&quot;text_prev&quot;</span><span style="color:#D4D4D4;">]),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_ctc&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(d[</span><span style="color:#CE9178;">&quot;text_ctc&quot;</span><span style="color:#D4D4D4;">]),</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you want to use <code>datasets</code> library or <code>lhotse</code> library:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># Datasets library</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> datasets </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> load_dataset, Audio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset = load_dataset(</span><span style="color:#CE9178;">&quot;audiofolder&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data_dir</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;/path/to/huggingface_dataset&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">split</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;train[:-</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">validation_examples</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">]&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">valid_dataset = load_dataset(</span><span style="color:#CE9178;">&quot;audiofolder&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data_dir</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;/path/to/huggingface_dataset&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">split</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;train[-</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">validation_examples</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">:]&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset = train_dataset.cast_column(</span><span style="color:#CE9178;">&quot;audio&quot;</span><span style="color:#D4D4D4;">, Audio(</span><span style="color:#9CDCFE;">sampling_rate</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">16000</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">valid_dataset = valid_dataset.cast_column(</span><span style="color:#CE9178;">&quot;audio&quot;</span><span style="color:#D4D4D4;">, Audio(</span><span style="color:#9CDCFE;">sampling_rate</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">16000</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">data_info = {</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;speech&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: d[</span><span style="color:#CE9178;">&#39;audio&#39;</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&#39;array&#39;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;&lt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">LANGUAGE</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&gt;&lt;asr&gt;&lt;notimestamps&gt; </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">d[</span><span style="color:#CE9178;">&#39;transcript&#39;</span><span style="color:#D4D4D4;">]</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_prev&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(</span><span style="color:#CE9178;">&quot;&lt;na&gt;&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_ctc&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(d[</span><span style="color:#CE9178;">&quot;text_ctc&quot;</span><span style="color:#D4D4D4;">]),</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Or lhotse library. The following code is from the official document.</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> pathlib </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Path</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> lhotse </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> CutSet</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> lhotse.recipes </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> download_librispeech, prepare_librispeech</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> load_audio</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">audio_path</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    y, _ = librosa.load(audio_path, </span><span style="color:#9CDCFE;">sr</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">16000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">root_dir = Path(</span><span style="color:#CE9178;">&quot;data&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">tmp_dir = Path(</span><span style="color:#CE9178;">&quot;tmp&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">tmp_dir.mkdir(</span><span style="color:#9CDCFE;">exist_ok</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">num_jobs = os.cpu_count() - </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">libri_variant = </span><span style="color:#CE9178;">&quot;mini_librispeech&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">libri_root = download_librispeech(root_dir, </span><span style="color:#9CDCFE;">dataset_parts</span><span style="color:#D4D4D4;">=libri_variant)</span></span>
<span class="line"><span style="color:#D4D4D4;">libri = prepare_librispeech(</span></span>
<span class="line"><span style="color:#D4D4D4;">    libri_root, </span><span style="color:#9CDCFE;">dataset_parts</span><span style="color:#D4D4D4;">=libri_variant, </span><span style="color:#9CDCFE;">output_dir</span><span style="color:#D4D4D4;">=root_dir, </span><span style="color:#9CDCFE;">num_jobs</span><span style="color:#D4D4D4;">=num_jobs</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset = CutSet.from_manifests(**libri[</span><span style="color:#CE9178;">&quot;train-clean-5&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">valid_dataset = CutSet.from_manifests(**libri[</span><span style="color:#CE9178;">&quot;dev-clean-2&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">data_info = {</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;speech&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: load_audio(d.recording.sources[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].source),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;&lt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">LANGUAGE</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&gt;&lt;asr&gt;&lt;notimestamps&gt; </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">d.supervisions[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].text</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_prev&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(</span><span style="color:#CE9178;">&quot;&lt;na&gt;&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;text_ctc&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">lambda</span><span style="color:#9CDCFE;"> d</span><span style="color:#D4D4D4;">: tokenize(d.supervisions[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].text),</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And finally you need to wrap your custom dataset with ESPnetEasyDataset.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># Convert into ESPnet-Easy dataset format</span></span>
<span class="line"><span style="color:#D4D4D4;">train_dataset = ez.dataset.ESPnetEasyDataset(train_dataset, </span><span style="color:#9CDCFE;">data_info</span><span style="color:#D4D4D4;">=data_info)</span></span>
<span class="line"><span style="color:#D4D4D4;">valid_dataset = ez.dataset.ESPnetEasyDataset(valid_dataset, </span><span style="color:#9CDCFE;">data_info</span><span style="color:#D4D4D4;">=data_info)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="training" tabindex="-1"><a class="header-anchor" href="#training"><span>Training</span></a></h2><p>While the configuration remains consistent with other notebooks, the instantiation arguments for the Trainer class differ in this case. As we have not generated dump files, we can disregard arguments related to dump files and directly provide the train/valid dataset classes.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span>trainer = Trainer(</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    train_dataset=your_train_dataset_instance,</span></span>
<span class="line"><span>    train_dataset=your_valid_dataset_instance,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">trainer = ez.Trainer(</span></span>
<span class="line"><span style="color:#9CDCFE;">    task</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;s2t&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    train_config</span><span style="color:#D4D4D4;">=finetune_config,</span></span>
<span class="line"><span style="color:#9CDCFE;">    train_dataset</span><span style="color:#D4D4D4;">=train_dataset,</span></span>
<span class="line"><span style="color:#9CDCFE;">    valid_dataset</span><span style="color:#D4D4D4;">=valid_dataset,</span></span>
<span class="line"><span style="color:#9CDCFE;">    build_model_fn</span><span style="color:#D4D4D4;">=build_model_fn, </span><span style="color:#6A9955;"># provide the pre-trained model</span></span>
<span class="line"><span style="color:#9CDCFE;">    data_info</span><span style="color:#D4D4D4;">=data_info,</span></span>
<span class="line"><span style="color:#9CDCFE;">    output_dir</span><span style="color:#D4D4D4;">=EXP_DIR,</span></span>
<span class="line"><span style="color:#9CDCFE;">    stats_dir</span><span style="color:#D4D4D4;">=STATS_DIR,</span></span>
<span class="line"><span style="color:#9CDCFE;">    ngpu</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">trainer.collect_stats()</span></span>
<span class="line"><span style="color:#D4D4D4;">trainer.train()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inference" tabindex="-1"><a class="header-anchor" href="#inference"><span>Inference</span></a></h2><p>When training is done, we can use the inference API to generate the transcription, but don&#39;t forget to apply lora before loading the model!</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">DEVICE = </span><span style="color:#CE9178;">&quot;cuda&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">model = Speech2Text.from_pretrained(</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;espnet/owsm_v3.1_ebf&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    category_sym</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;&lt;jpn&gt;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    beam_size</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    device</span><span style="color:#D4D4D4;">=DEVICE</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">create_lora_adapter(model.s2t_model, </span><span style="color:#9CDCFE;">target_modules</span><span style="color:#D4D4D4;">=LORA_TARGET)</span></span>
<span class="line"><span style="color:#D4D4D4;">model.s2t_model.eval()</span></span>
<span class="line"><span style="color:#D4D4D4;">d = torch.load(</span><span style="color:#CE9178;">&quot;./exp/finetune/1epoch.pth&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">model.s2t_model.load_state_dict(d)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="results" tabindex="-1"><a class="header-anchor" href="#results"><span>Results</span></a></h2><p>As a result, the finetuned owsm-v3.1 could successfully transcribe the audio files.</p><p><strong>Example</strong></p><ul><li>before finetune: 出してこの時間二のどりを。</li><li>after finetune: ダンスでこの世界に彩りを。</li></ul>`,33),o=[p];function t(i,r){return n(),a("div",null,o)}const D=s(e,[["render",t],["__file","finetune_owsm.html.vue"]]);export{D as default};
