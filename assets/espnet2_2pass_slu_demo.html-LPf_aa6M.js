import{_ as s,o as n,c as a,e as l}from"./app-FOR18dDf.js";const e={},p=l(`<h1 id="espnet-2-pass-slu-demonstration" tabindex="-1"><a class="header-anchor" href="#espnet-2-pass-slu-demonstration"><span>ESPNET 2 pass SLU Demonstration</span></a></h1><p>This notebook provides a demonstration of the Two Pass End-to-End Spoken Language Understanding model</p><p>Paper Link: https://arxiv.org/abs/2207.06670</p><p>ESPnet2-SLU: https://github.com/espnet/espnet/tree/master/egs2/TEMPLATE/slu1</p><p>Author: Siddhant Arora</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">! python -m pip install transformers</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git clone https://github.com/espnet/espnet /espnet</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">pip install /espnet</span></span>
<span class="line"><span style="color:#D4D4D4;">%pip install -q espnet_model_zoo</span></span>
<span class="line"><span style="color:#D4D4D4;">%pip install fairseq@git+https://github.com//pytorch/fairseq.git@f2146bdc7abf293186de9449bfa2272775e39e1d</span><span style="color:#6A9955;">#egg=fairseq</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="download-audio-file" tabindex="-1"><a class="header-anchor" href="#download-audio-file"><span>Download Audio File</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># !gdown --id 1LxoxCoFgx3u8CvKb1loybGFtArKKPcAH -O /content/audio_file.wav</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">gdown </span><span style="color:#F44747;">--</span><span style="color:#DCDCAA;">id</span><span style="color:#F44747;"> 18ANT62ittt7Ai2E8bQRlvT0ZVXXsf1eE</span><span style="color:#D4D4D4;"> -O /content/audio_file.wav</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> soundfile</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> IPython.display </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> display, Audio</span></span>
<span class="line"><span style="color:#D4D4D4;">mixwav_mc, sr = soundfile.read(</span><span style="color:#CE9178;">&quot;/content/audio_file.wav&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">display(Audio(mixwav_mc.T, </span><span style="color:#9CDCFE;">rate</span><span style="color:#D4D4D4;">=sr))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="download-and-load-pretrained-first-pass-model" tabindex="-1"><a class="header-anchor" href="#download-and-load-pretrained-first-pass-model"><span>Download and Load pretrained First Pass Model</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git lfs clone https://huggingface.co/espnet/siddhana_slurp_new_asr_train_asr_conformer_raw_en_word_valid.acc.ave_10best /content/slurp_first_pass_model</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.bin.asr_inference </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Speech2Text</span></span>
<span class="line"><span style="color:#D4D4D4;">speech2text_slurp = Speech2Text.from_pretrained(</span></span>
<span class="line"><span style="color:#9CDCFE;">    asr_train_config</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;/content/slurp_first_pass_model/exp/asr_train_asr_conformer_raw_en_word/config.yaml&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    asr_model_file</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;/content/slurp_first_pass_model/exp/asr_train_asr_conformer_raw_en_word/valid.acc.ave_10best.pth&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    nbest</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">nbests_orig = speech2text_slurp(mixwav_mc)</span></span>
<span class="line"><span style="color:#D4D4D4;">text, *_ = nbests_orig[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> text_normalizer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">sub_word_transcript</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    transcript = sub_word_transcript[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].replace(</span><span style="color:#CE9178;">&quot;▁&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> sub_word </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> sub_word_transcript[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:]:</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#CE9178;"> &quot;▁&quot;</span><span style="color:#569CD6;"> in</span><span style="color:#D4D4D4;"> sub_word:</span></span>
<span class="line"><span style="color:#D4D4D4;">            transcript = transcript + </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;"> + sub_word.replace(</span><span style="color:#CE9178;">&quot;▁&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            transcript = transcript + sub_word</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> transcript</span></span>
<span class="line"><span style="color:#D4D4D4;">intent_text=</span><span style="color:#CE9178;">&quot;{scenario: &quot;</span><span style="color:#D4D4D4;">+text.split()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]+</span><span style="color:#CE9178;">&quot;, action: &quot;</span><span style="color:#D4D4D4;">+</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">.join(text.split()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:])+</span><span style="color:#CE9178;">&quot;}&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;INTENT: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">intent_text</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">transcript=text_normalizer(text.split()[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:])</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;ASR hypothesis: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">transcript</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;First pass SLU model fails to predict the correct action.&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="download-and-load-pretrained-second-pass-model" tabindex="-1"><a class="header-anchor" href="#download-and-load-pretrained-second-pass-model"><span>Download and Load pretrained Second Pass Model</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git lfs clone https://huggingface.co/espnet/slurp_slu_2pass /content/slurp_second_pass_model</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.bin.slu_inference </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Speech2Understand</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> transformers </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> AutoModel, AutoTokenizer</span></span>
<span class="line"><span style="color:#D4D4D4;">speech2text_second_pass_slurp = Speech2Understand.from_pretrained(</span></span>
<span class="line"><span style="color:#9CDCFE;">    slu_train_config</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;/content/slurp_second_pass_model/exp/slu_train_asr_bert_conformer_deliberation_raw_en_word/config.yaml&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    slu_model_file</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;/content/slurp_second_pass_model/exp/slu_train_asr_bert_conformer_deliberation_raw_en_word/valid.acc.ave_10best.pth&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    nbest</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet2.tasks.slu </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> SLUTask</span></span>
<span class="line"><span style="color:#D4D4D4;">preprocess_fn=SLUTask.build_preprocess_fn(</span></span>
<span class="line"><span style="color:#D4D4D4;">            speech2text_second_pass_slurp.asr_train_args, </span><span style="color:#569CD6;">False</span></span>
<span class="line"><span style="color:#D4D4D4;">        )</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#D4D4D4;">transcript = preprocess_fn.text_cleaner(transcript)</span></span>
<span class="line"><span style="color:#D4D4D4;">tokens = preprocess_fn.transcript_tokenizer.text2tokens(transcript)</span></span>
<span class="line"><span style="color:#D4D4D4;">text_ints = np.array(preprocess_fn.transcript_token_id_converter.tokens2ids(tokens), </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=np.int64)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> torch</span></span>
<span class="line"><span style="color:#D4D4D4;">nbests = speech2text_second_pass_slurp(mixwav_mc,torch.tensor(text_ints))</span></span>
<span class="line"><span style="color:#D4D4D4;">text1, *_ = nbests[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">intent_text=</span><span style="color:#CE9178;">&quot;{scenario: &quot;</span><span style="color:#D4D4D4;">+text1.split()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]+</span><span style="color:#CE9178;">&quot;, action: &quot;</span><span style="color:#D4D4D4;">+</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">.join(text1.split()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&quot;_&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:])+</span><span style="color:#CE9178;">&quot;}&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;INTENT: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">intent_text</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">transcript=text_normalizer(text1.split()[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:])</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;ASR hypothesis: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">transcript</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;Second pass SLU model successfully recognizes the correct action.&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[p];function t(r,c){return n(),a("div",null,o)}const D=s(e,[["render",t],["__file","espnet2_2pass_slu_demo.html.vue"]]);export{D as default};
