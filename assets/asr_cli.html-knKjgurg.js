import{_ as o,r as p,o as t,c as i,a as s,b as a,d as l,e}from"./app-FOR18dDf.js";const r={},c=s("h1",{id:"speech-recognition-recipe",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#speech-recognition-recipe"},[s("span",null,"Speech Recognition (Recipe)")])],-1),d={href:"https://github.com/ShigekiKarita",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>July 29 2019</p><p>ESPnet Hackathon 2019 @Tokyo</p><h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract"><span>Abstract</span></a></h2><p>This example shows you a practical ASR example using ESPnet as a command line interface, and also as a library.</p><p>See also</p><ul><li>documetation https://espnet.github.io/espnet/</li><li>github https://github.com/espnet</li></ul><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>ESPnet depends on Kaldi ASR toolkit and Warp-CTC. This will take a few minutes.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># OS setup</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">sudo apt-get install bc tree</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cat /etc/os-release</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># espnet setup</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git clone https://github.com/espnet/espnet</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd espnet; pip install -e .</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">mkdir -p espnet/tools/venv/</span><span style="color:#DCDCAA;">bin</span><span style="color:#D4D4D4;">; touch espnet/tools/venv/</span><span style="color:#DCDCAA;">bin</span><span style="color:#D4D4D4;">/activate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># warp ctc setup</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">git clone https://github.com/espnet/warp-ctc -b pytorch-</span><span style="color:#B5CEA8;">1.1</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd warp-ctc </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> mkdir build </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> cd build </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> cmake .. </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> make -j4</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd warp-ctc/pytorch_binding </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> python setup.py install </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># kaldi setup</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd ./espnet/tools; git clone https://github.com/kaldi-asr/kaldi</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">echo </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;"> &gt; ./espnet/tools/kaldi/tools/extras/check_dependencies.sh </span><span style="color:#6A9955;"># ignore check</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">chmod +x ./espnet/tools/kaldi/tools/extras/check_dependencies.sh</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd ./espnet/tools/kaldi/tools; make sph2pipe sclite</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">rm -rf espnet/tools/kaldi/tools/python</span></span>
<span class="line"><span style="color:#D4D4D4;">![ ! -e ubuntu16-featbin.tar.gz ] </span><span style="color:#F44747;">&amp;&amp;</span><span style="color:#D4D4D4;"> wget https://</span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">198329952</span><span style="color:#D4D4D4;">-gh.circle-artifacts.com/</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">/home/circleci/repo/ubuntu16-featbin.tar.gz</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">tar -xf ./ubuntu16-featbin.tar.gz</span></span>
<span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cp featbin/* espnet/tools/kaldi/src/featbin/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="espnet-command-line-usage-espnet-egs-xxx" tabindex="-1"><a class="header-anchor" href="#espnet-command-line-usage-espnet-egs-xxx"><span>ESPnet command line usage (espnet/egs/xxx)</span></a></h2><p>You can use the end-to-end script <code>run.sh</code> for reproducing systems reported in <code>espnet/egs/*/asr1/RESULTS.md</code>. Typically, we organize <code>run.sh</code> with several stages:</p><ol start="0"><li>Data download (if available)</li><li>Kaldi-style data preparation</li><li>Save python-friendly data (e.g., JSON, HDF5, etc)</li><li>Language model training</li><li>ASR model training</li><li>Decoding and evaluation</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">ls espnet/egs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="stage-0-2-data-preparation" tabindex="-1"><a class="header-anchor" href="#stage-0-2-data-preparation"><span>Stage 0 - 2 Data preparation</span></a></h3><p>For example, if you add <code>--stop-stage 2</code>, you can stop the script before neural network training.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd espnet/egs/an4/asr1; ./run.sh  </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">ngpu </span><span style="color:#B5CEA8;">1</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop-stage </span><span style="color:#B5CEA8;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="kaldi-style-directory-structure" tabindex="-1"><a class="header-anchor" href="#kaldi-style-directory-structure"><span>Kaldi-style directory structure</span></a></h2><p>Always we organize each recipe placed in <code>egs/xxx/asr1</code> in Kaldi way:</p>`,18),y=s("li",null,[s("code",null,"conf/"),a(": kaldi configurations, e.g., speech feature")],-1),u=s("code",null,"data/",-1),v={href:"https://kaldi-asr.org/doc/data_prep.html",target:"_blank",rel:"noopener noreferrer"},m=s("li",null,[s("code",null,"exp/"),a(": intermidiate files through experiments, e.g., log files, model parameters")],-1),h=s("code",null,"fbank/",-1),b={href:"https://kaldi-asr.org/doc/io.html",target:"_blank",rel:"noopener noreferrer"},g=s("li",null,[s("code",null,"dump/"),a(": ESPnet meta data for tranining, e.g., json, hdf5")],-1),C=s("li",null,[s("code",null,"local/"),a(": corpus specific data preparation scripts")],-1),E={href:"https://github.com/kaldi-asr/kaldi/tree/master/egs/wsj/s5/steps",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/kaldi-asr/kaldi/tree/master/egs/wsj/s5/utils",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">tree -L </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> espnet/egs/an4/asr1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tips-essential-files-in-data-preparation" tabindex="-1"><a class="header-anchor" href="#tips-essential-files-in-data-preparation"><span>TIPS: essential files in data preparation</span></a></h3><p>To create a new recipe, all you need is stage 1 that creates key-value pair files:</p><ul><li>speech<code>data/xxx/wav.scp</code></li><li>text<code>data/xxx/text</code></li></ul><h4 id="raw-speech-file-list" tabindex="-1"><a class="header-anchor" href="#raw-speech-file-list"><span>raw speech file list</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">head espnet/egs/an4/asr1/data/train/wav.scp</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="raw-text-list" tabindex="-1"><a class="header-anchor" href="#raw-text-list"><span>raw text list</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">head espnet/egs/an4/asr1/data/train/text</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tips-explore-datasets-with-data-json" tabindex="-1"><a class="header-anchor" href="#tips-explore-datasets-with-data-json"><span>TIPS: explore datasets with data.json</span></a></h3><p>To explore datasets easily, ESPnet stores metadata <code>dump/xxx/data.json</code> in the stage 2.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> json</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> matplotlib.pyplot </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> plt</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> kaldiio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># load 10-th speech/text in data.json</span></span>
<span class="line"><span style="color:#D4D4D4;">root = </span><span style="color:#CE9178;">&quot;espnet/egs/an4/asr1&quot;</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(root + </span><span style="color:#CE9178;">&quot;/dump/test/deltafalse/data.json&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">  test_json = json.load(f)[</span><span style="color:#CE9178;">&quot;utts&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#D4D4D4;">key, info = </span><span style="color:#4EC9B0;">list</span><span style="color:#D4D4D4;">(test_json.items())[</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># plot the speech feature</span></span>
<span class="line"><span style="color:#D4D4D4;">fbank = kaldiio.load_mat(info[</span><span style="color:#CE9178;">&quot;input&quot;</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;feat&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.matshow(fbank.T[::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(key + </span><span style="color:#CE9178;">&quot;: &quot;</span><span style="color:#D4D4D4;"> + info[</span><span style="color:#CE9178;">&quot;output&quot;</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># print the key-value pair</span></span>
<span class="line"><span style="color:#D4D4D4;">key, info</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stage-3-4-nn-training" tabindex="-1"><a class="header-anchor" href="#stage-3-4-nn-training"><span>Stage 3 - 4 NN Training</span></a></h3><p>Let&#39;s go to the most interesting part...</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">tail espnet/egs/an4/asr1/conf/train_mtlalpha1.0.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd espnet/egs/an4/asr1; ./run.sh  </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">ngpu </span><span style="color:#B5CEA8;">1</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">3</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop-stage </span><span style="color:#B5CEA8;">4</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">train-config ./conf/train_mtlalpha1.0.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tips-change-yaml-py" tabindex="-1"><a class="header-anchor" href="#tips-change-yaml-py"><span>TIPS: change_yaml.py</span></a></h3><p>You can tweak YAML config by <strong>$(change_yaml.py xxx.yaml -a yyy=zzz)</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd espnet/egs/an4/asr1; source path.sh; \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  ./run.sh  </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">ngpu </span><span style="color:#B5CEA8;">1</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">4</span><span style="color:#F44747;"> --</span><span style="color:#D4D4D4;">stop-stage </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> \\</span></span>
<span class="line"><span style="color:#F44747;">  --</span><span style="color:#D4D4D4;">train-config </span><span style="color:#F44747;">$</span><span style="color:#D4D4D4;">(change_yaml.py ./conf/train_mtlalpha1.0.yaml -a eunits=</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tips-tensorboard" tabindex="-1"><a class="header-anchor" href="#tips-tensorboard"><span>TIPS: tensorboard</span></a></h3><p>You can easily monitor effects of the config by tensorboard</p><h3 id="decoding-and-evaluation" tabindex="-1"><a class="header-anchor" href="#decoding-and-evaluation"><span>Decoding and evaluation</span></a></h3><p>decode config (<code>change_yaml.py</code> also works)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cat espnet/egs/an4/asr1/conf/decode_ctcweight1.0.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="command-line-usage" tabindex="-1"><a class="header-anchor" href="#command-line-usage"><span>Command line usage</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">cd espnet/egs/an4/asr1; ./run.sh  </span><span style="color:#F44747;">--</span><span style="color:#D4D4D4;">stage </span><span style="color:#B5CEA8;">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="asr-result-as-data-json" tabindex="-1"><a class="header-anchor" href="#asr-result-as-data-json"><span>ASR result as <code>data.json</code></span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">head -n20 espnet/egs/an4/asr1/exp/train_nodev_pytorch_train_mtlalpha1.0/decode_test_decode_ctcweight1.0_lm_word100/data.json</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="recognize-speech-from-python" tabindex="-1"><a class="header-anchor" href="#recognize-speech-from-python"><span>Recognize speech from python</span></a></h3><p>Let&#39;s use ESPnet as a library and the trained model:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#F44747;">!</span><span style="color:#D4D4D4;">ls espnet/egs/an4/asr1/exp/train_nodev_pytorch_train_mtlalpha1.0/results</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="recap-load-speech-from-data-json" tabindex="-1"><a class="header-anchor" href="#recap-load-speech-from-data-json"><span>recap: load speech from data.json</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> json</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> matplotlib.pyplot </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> plt</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> kaldiio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># load 10-th speech/text in data.json</span></span>
<span class="line"><span style="color:#D4D4D4;">root = </span><span style="color:#CE9178;">&quot;espnet/egs/an4/asr1&quot;</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(root + </span><span style="color:#CE9178;">&quot;/dump/test/deltafalse/data.json&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">  test_json = json.load(f)[</span><span style="color:#CE9178;">&quot;utts&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#D4D4D4;">key, info = </span><span style="color:#4EC9B0;">list</span><span style="color:#D4D4D4;">(test_json.items())[</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># plot the speech feature</span></span>
<span class="line"><span style="color:#D4D4D4;">fbank = kaldiio.load_mat(info[</span><span style="color:#CE9178;">&quot;input&quot;</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;feat&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.matshow(fbank.T[::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(key + </span><span style="color:#CE9178;">&quot;: &quot;</span><span style="color:#D4D4D4;"> + info[</span><span style="color:#CE9178;">&quot;output&quot;</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="load-model" tabindex="-1"><a class="header-anchor" href="#load-model"><span>load model</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> json</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> torch</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> argparse</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet.bin.asr_recog </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> get_parser</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> espnet.nets.pytorch_backend.e2e_asr </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> E2E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">root = </span><span style="color:#CE9178;">&quot;espnet/egs/an4/asr1&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">model_dir = root + </span><span style="color:#CE9178;">&quot;/exp/train_nodev_pytorch_train_mtlalpha1.0/results&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># load model</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(model_dir + </span><span style="color:#CE9178;">&quot;/model.json&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">  idim, odim, conf = json.load(f)</span></span>
<span class="line"><span style="color:#D4D4D4;">model = E2E(idim, odim, argparse.Namespace(**conf))</span></span>
<span class="line"><span style="color:#D4D4D4;">model.load_state_dict(torch.load(model_dir + </span><span style="color:#CE9178;">&quot;/model.loss.best&quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">model.cpu().eval()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># load token dict</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#DCDCAA;"> open</span><span style="color:#D4D4D4;">(root + </span><span style="color:#CE9178;">&quot;/data/lang_1char/train_nodev_units.txt&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;r&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">  token_list = [entry.split()[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> entry </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> f]</span></span>
<span class="line"><span style="color:#D4D4D4;">token_list.insert(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&lt;blank&gt;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">token_list.append(</span><span style="color:#CE9178;">&#39;&lt;eos&gt;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># recognize speech</span></span>
<span class="line"><span style="color:#D4D4D4;">parser = get_parser()</span></span>
<span class="line"><span style="color:#D4D4D4;">args = parser.parse_args([</span><span style="color:#CE9178;">&quot;--beam-size&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;2&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;--ctc-weight&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;1.0&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;--result-label&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;out.json&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;--model&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">result = model.recognize(fbank, args, token_list)</span></span>
<span class="line"><span style="color:#D4D4D4;">s = </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">.join(conf[</span><span style="color:#CE9178;">&quot;char_list&quot;</span><span style="color:#D4D4D4;">][y] </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> y </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> result[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;yseq&quot;</span><span style="color:#D4D4D4;">]).replace(</span><span style="color:#CE9178;">&quot;&lt;eos&gt;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">).replace(</span><span style="color:#CE9178;">&quot;&lt;space&gt;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;">).replace(</span><span style="color:#CE9178;">&quot;&lt;blank&gt;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;groundtruth:&quot;</span><span style="color:#D4D4D4;">, info[</span><span style="color:#CE9178;">&quot;output&quot;</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;text&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;prediction: &quot;</span><span style="color:#D4D4D4;">, s)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> kaldiio</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> IPython.display </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Audio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  d = os.getcwd()</span></span>
<span class="line"><span style="color:#D4D4D4;">  os.chdir(root)</span></span>
<span class="line"><span style="color:#D4D4D4;">  sr, wav = kaldiio.load_scp(</span><span style="color:#CE9178;">&quot;data/test/wav.scp&quot;</span><span style="color:#D4D4D4;">)[key]</span></span>
<span class="line"><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  os.chdir(d)</span></span>
<span class="line"><span style="color:#D4D4D4;">Audio(wav, </span><span style="color:#9CDCFE;">rate</span><span style="color:#D4D4D4;">=sr)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function x(_,q){const n=p("ExternalLinkIcon");return t(),i("div",null,[c,s("p",null,[a("Author: "),s("a",d,[a("Shigeki Karita"),l(n)])]),D,s("ul",null,[y,s("li",null,[u,a(": almost raw "),s("a",v,[a("data prepared by Kaldi"),l(n)])]),m,s("li",null,[h,a(": speech feature binary files, e.g., "),s("a",b,[a("ark, scp"),l(n)])]),g,C,s("li",null,[s("a",E,[a("steps/"),l(n)]),a(", "),s("a",f,[a("utils/"),l(n)]),a(": Kaldi's helper scripts")])]),k])}const F=o(r,[["render",x],["__file","asr_cli.html.vue"]]);export{F as default};
